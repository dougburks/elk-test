#!/bin/bash

. /usr/sbin/so-elastic-common

. /etc/nsm/securityonion.conf

# Need to remove the existing containers before starting new ones.
# so-elastic-stop does run so-elastic-remove after stopping containers,
# but we need to run it again here just in case.
# The common scenario would be a user rebooting without first
# running so-elastic-stop.
/usr/sbin/so-elastic-remove

echo
echo "Starting containers:"
echo

if [ "$FREQ_SERVER_ENABLED" = "yes" ]; then
	echo -n "so-freqserver: "
	if docker ps | grep -q so-freqserver; then
		echo "Already started!"
	else
		docker run --name=so-freqserver \
			--detach \
			--publish 10004:10004 \
			--volume /var/log/freq_server:/var/log/freq_server \
			$FREQ_SERVER_OPTIONS \
			$DOCKERHUB/so-freqserver
                	docker network connect --alias freqserver $DOCKERNET so-freqserver
	fi
fi

if [ "$DOMAIN_STATS_ENABLED" = "yes" ]; then
	echo -n "so-domainstats: "
	if docker ps | grep -q so-domainstats; then
		echo "Already started!"
	else
		# Check for internet connectivity -- if none, disable DomainStats.

		echo
		echo "Checking internet connectivity...waiting up to 10 seconds for a response."
		echo

		. /etc/nsm/securityonion.conf

		wget -q --spider "$DOMAIN_STATS_URL"
		echo "Connecting to ...$DOMAIN_STATS_URL"
		echo

		if [ $? -eq 0 ]; then
			echo "Connection successful..."
			echo
			docker run --name=so-domainstats \
				--detach \
				--publish 20000:20000 \
				--volume /var/log/domain_stats:/var/log/domain_stats \
				$DOMAIN_STATS_OPTIONS \
				$DOCKERHUB/so-domainstats
				docker network connect --alias domainstats $DOCKERNET so-domainstats
		else
                        echo "No internet connectivity, so not starting DomainStats."
                        echo
                fi
	fi
fi

if [ "$ELASTICSEARCH_ENABLED" = "yes" ]; then
	echo -n "so-elasticsearch: "
	if docker ps | grep -q so-elasticsearch; then
		echo "Already started!"
	else
		docker run --name=so-elasticsearch \
			--detach \
			--env "bootstrap_memory_lock=true" \
			--env ES_JAVA_OPTS="-Xms$ELASTICSEARCH_HEAP -Xmx$ELASTICSEARCH_HEAP" \
			--env "http.host=0.0.0.0" \
			--env "transport.host=127.0.0.1" \
			--env "cluster.name=$HOSTNAME" \
			--publish 9200:9200 \
			--publish 9300:9300 \
			--ulimit memlock=-1:-1 \
			--ulimit nofile=65536:65536 \
			--ulimit nproc=2048 \
			--volume /nsm/elasticsearch:/usr/share/elasticsearch/data \
			--volume /etc/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro \
			--volume /etc/elasticsearch/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties:ro \
			--volume /var/log/elasticsearch:/var/log/elasticsearch \
			$ELASTICSEARCH_OPTIONS \
			$DOCKERHUB/so-elasticsearch
			docker network connect --alias elasticsearch $DOCKERNET so-elasticsearch
	fi
fi

if [ "$LOGSTASH_ENABLED" = "yes" ]; then
	echo -n "so-logstash: "
	if docker ps | grep -q so-logstash; then
		echo "Already started!"
	else	
		if [ "$FREQ_SERVER_ENABLED" = "yes" ]; then
			cp -f /etc/logstash/optional/*_postprocess_freq_analysis_*.conf /etc/logstash/conf.d/
		fi
		if [ "$FREQ_SERVER_ENABLED" = "no" ]; then
			rm -f /etc/logstash/conf.d/*_postprocess_freq_analysis_*.conf
		fi
		if [ "$DOMAIN_STATS_ENABLED" = "yes" ]; then
			cp -f /etc/logstash/optional/8007_postprocess_dns_top1m_tagging.conf /etc/logstash/conf.d/
			cp -f /etc/logstash/optional/8008_postprocess_dns_whois_age.conf /etc/logstash/conf.d/
		fi
		if [ "$DOMAIN_STATS_ENABLED" = "no" ]; then
			rm -f /etc/logstash/conf.d/8007_postprocess_dns_top1m_tagging.conf
			rm -f /etc/logstash/conf.d/8008_postprocess_dns_whois_age.conf
		fi
		docker run --name=so-logstash \
			--detach \
			--env LS_JAVA_OPTS="-Xms$LOGSTASH_HEAP -Xmx$LOGSTASH_HEAP" \
			--publish 6050:6050 \
			--publish 6051:6051 \
			--publish 6052:6052 \
			--publish 6053:6053 \
			--volume /etc/logstash/log4j2.properties:/usr/share/logstash/config/log4j2.properties:ro \
			--volume /etc/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro \
			--volume /etc/logstash/logstash-template.json:/logstash-template.json:ro \
			--volume /etc/logstash/conf.d:/usr/share/logstash/pipeline/:ro \
			--volume /etc/nsm/rules:/etc/nsm/rules:ro \
			--volume /lib/dictionaries:/lib/dictionaries:ro \
			--volume /nsm/import:/nsm/import:ro \
			--volume /nsm/logstash:/usr/share/logstash/data/ \
			--volume /var/log/logstash:/var/log/logstash \
			$LOGSTASH_OPTIONS \
			$DOCKERHUB/so-logstash
                	docker network connect --alias logstash $DOCKERNET so-logstash
	fi
fi

if [ "$KIBANA_ENABLED" = "yes" ]; then
	if docker ps | grep -q so-kibana; then
		echo -n "so-kibana: "
		echo "Already started!"
	else
		source /etc/nsm/securityonion.conf
        	# Wait for ElasticSearch to come up, so that we can query for version infromation
        	echo -n "Waiting for ElasticSearch..."
        	COUNT=0
		ELASTICSEARCH_CONNECTED="no"
		while [[ "$COUNT" -le 60 ]]; do
                	curl --output /dev/null --silent --head --fail http://"$ELASTICSEARCH_HOST":"$ELASTICSEARCH_PORT"
			if [ $? -eq 0 ]; then
				ELASTICSEARCH_CONNECTED="yes"
				echo "connected!"
				# Compare current version of ES with previously stored version.
				CURRENT_KIBANA_VERSION=$(curl -s "http://$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT" | jq .version.number | sed 's/"//g')
				if [ "$CURRENT_KIBANA_VERSION" != "$KIBANA_VERSION" ]; then
					# Apply Kibana config and, if successful, update the version in /etc/nsm/securityonion.conf
					/usr/sbin/so-elastic-configure-kibana > /dev/null 2>&1 &&
					sed -i "s/KIBANA_VERSION=.*/KIBANA_VERSION=$CURRENT_KIBANA_VERSION/" /etc/nsm/securityonion.conf
				fi
				break
			else
				((COUNT+=1))
				sleep 1
				echo -n "."
			fi
		done
		if [ "$ELASTICSEARCH_CONNECTED" == "no" ]; then
			echo
			echo -e "Connection attempt timed out.  Unable to connect to ElasticSearch.  \nPlease try: \n  -checking log(s) in /var/log/elasticsearch/\n  -running 'sudo docker ps' \n  -running 'sudo so-elastic-restart'" 
			echo
		fi
		echo -n "so-kibana: "
		if docker ps | grep -q so-kibana; then
			echo "Already started!"
		else
			docker run --name=so-kibana \
				--detach \
				--env "KIBANA_DEFAULTAPPID=$KIBANA_DEFAULTAPPID" \
				--publish 5601:5601 \
				--volume /etc/kibana/:/usr/share/kibana/config/:ro \
                		--volume /var/log/kibana:/var/log/kibana \
				$KIBANA_OPTIONS \
				$DOCKERHUB/so-kibana
				docker network connect --alias kibana $DOCKERNET so-kibana
		fi
	fi
fi

if [ "$ELASTALERT_ENABLED" = "yes" ]; then
        echo -n "so-elastalert: "
        if docker ps | grep -q so-elastalert; then
		echo "Already started!"
	else
		docker run --name=so-elastalert \
                	--detach \
			--volume /etc/elastalert/rules:/etc/elastalert/rules/ \
			--volume /var/log/elastalert:/var/log/elastalert/ \
			$ELASTALERT_OPTIONS \
                	$DOCKERHUB/so-elastalert
			docker network connect --alias elastalert $DOCKERNET so-elastalert
	fi
fi	

if [ "$CURATOR_ENABLED" = "yes" ]; then
        echo -n "so-curator: "
        if docker ps | grep -q so-curator; then
		echo "Already started!"
	else
		docker run --name=so-curator \
                	--detach \
                	--volume /etc/curator/config/curator.yml:/etc/curator/config/curator.yml:ro \
                	--volume /etc/curator/action/:/etc/curator/action:ro \
                	--volume /var/log/curator/:/var/log/curator/ \
                	-it \
			$CURATOR_OPTIONS \
			$DOCKERHUB/so-curator
                	docker network connect --alias curator $DOCKERNET so-curator
	fi
fi

echo
